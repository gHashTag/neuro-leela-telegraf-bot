import { Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'
import { generateLipSync } from '../../services/generateLipSync'

const MAX_FILE_SIZE = 50 * 1024 * 1024 // 50 MB, –ø—Ä–∏–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

export const lipSyncWizard = new Scenes.WizardScene<MyContext>(
  'lipSyncWizard',
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    await ctx.reply(
      isRu ? '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ URL –≤–∏–¥–µ–æ' : 'Send a video or video URL',
      {
        reply_markup: { remove_keyboard: true },
      }
    )
    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    const message = ctx.message
    let videoUrl: string | undefined

    if (message && 'video' in message) {
      const videoFile = await ctx.telegram.getFile(message.video.file_id)
      if (videoFile.file_size > MAX_FILE_SIZE) {
        await ctx.reply(
          isRu
            ? '–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
            : 'Error: video is too large. Maximum size: 50MB'
        )
        return ctx.scene.leave()
      }
      videoUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${videoFile.file_path}`
    } else if (message && 'text' in message) {
      videoUrl = message.text
    }
    console.log('videoUrl', videoUrl)
    if (!videoUrl) {
      await ctx.reply(
        isRu ? '–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' : 'Error: video not provided'
      )
      return ctx.scene.leave()
    }

    ctx.session.videoUrl = videoUrl
    await ctx.reply(
      isRu
        ? '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ URL –∞—É–¥–∏–æ'
        : 'Send an audio, voice message, or audio URL'
    )
    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    const message = ctx.message

    let audioUrl: string | undefined
    if (message && 'audio' in message) {
      const audioFile = await ctx.telegram.getFile(message.audio.file_id)
      if (audioFile.file_size > MAX_FILE_SIZE) {
        await ctx.reply(
          isRu
            ? '–û—à–∏–±–∫–∞: –∞—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
            : 'Error: audio is too large. Maximum size: 50MB'
        )
        return ctx.scene.leave()
      }
      audioUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${audioFile.file_path}`
    } else if (message && 'voice' in message) {
      const voiceFile = await ctx.telegram.getFile(message.voice.file_id)
      console.log('voiceFile', voiceFile)
      if (voiceFile.file_size > MAX_FILE_SIZE) {
        await ctx.reply(
          isRu
            ? '–û—à–∏–±–∫–∞: –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
            : 'Error: voice message is too large. Maximum size: 50MB'
        )
        return ctx.scene.leave()
      }
      audioUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${voiceFile.file_path}`
    } else if (message && 'text' in message) {
      audioUrl = message.text
    }

    if (!audioUrl) {
      await ctx.reply(
        isRu ? '–û—à–∏–±–∫–∞: –∞—É–¥–∏–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' : 'Error: audio not provided'
      )
      return ctx.scene.leave()
    }

    ctx.session.audioUrl = audioUrl

    if (!ctx.from?.id) {
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
          : 'Error: User ID not provided'
      )
      return ctx.scene.leave()
    }

    try {
      await generateLipSync(
        ctx.session.videoUrl,
        ctx.session.audioUrl,
        ctx.from.id.toString()
      )

      await ctx.reply(
        isRu
          ? `üé• –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞`
          : `üé• Video sent for processing. Wait for the result`
      )
    } catch (error) {
      console.error('Error in generateLipSync:', error)
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ'
          : 'An error occurred while processing the video'
      )
    }
    return ctx.scene.leave()
  }
)

export default lipSyncWizard
