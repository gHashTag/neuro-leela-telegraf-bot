import { Markup, Scenes } from 'telegraf'
import md5 from 'md5'
import { MyContext, Subscription } from '../../interfaces'
import { saveUserEmail, setPayments } from '../../core/supabase'
import { isRussian } from '@/helpers'
import { MERCHANT_LOGIN, PASSWORD1, RESULT_URL2 } from '@/config'
import { handleHelpCancel } from '@/handlers'
import { updateUserSubscription } from '@/core/supabase/updateUserSubscription'

const merchantLogin = MERCHANT_LOGIN
const password1 = PASSWORD1

const description = '–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥'

const paymentOptions: {
  amount: number
  stars: string
  subscription: Subscription
}[] = [
  { amount: 3333, stars: '3333', subscription: 'game_leela' },
  { amount: 6666, stars: '6666', subscription: 'game_in_group' },
  { amount: 66666, stars: '66666', subscription: 'mentor_game' },
]

const resultUrl2 = RESULT_URL2

function generateRobokassaUrl(
  merchantLogin: string,
  outSum: number,
  invId: number,
  description: string,
  password1: string
): string {
  const signatureValue = md5(
    `${merchantLogin}:${outSum}:${invId}:${encodeURIComponent(
      resultUrl2
    )}:${password1}`
  ).toUpperCase()
  const url = `https://auth.robokassa.ru/Merchant/Index.aspx?MerchantLogin=${merchantLogin}&OutSum=${outSum}&InvId=${invId}&Description=${encodeURIComponent(
    description
  )}&SignatureValue=${signatureValue}&ResultUrl2=${encodeURIComponent(
    resultUrl2
  )}`

  return url
}

async function getInvoiceId(
  merchantLogin: string,
  outSum: number,
  invId: number,
  description: string,
  password1: string
): Promise<string> {
  console.log('Start getInvoiceId rubGetWizard', {
    merchantLogin,
    outSum,
    invId,
    description,
    password1,
  })
  try {
    const signatureValue = md5(
      `${merchantLogin}:${outSum}:${invId}:${password1}`
    )
    console.log('signatureValue', signatureValue)

    const response = generateRobokassaUrl(
      merchantLogin,
      outSum,
      invId,
      description,
      password1
    )
    console.log('response', response)

    return response
  } catch (error) {
    console.error('Error in getInvoiceId:', error)
    throw error
  }
}

export const rubGetWizard = new Scenes.BaseScene<MyContext>('rubGetWizard')

rubGetWizard.enter(async ctx => {
  const isRu = isRussian(ctx)
  const email = ctx.session.email
  if (!email) {
    await ctx.reply(
      isRu
        ? 'üëâ –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à E-mail.'
        : 'üëâ To generate an invoice, please provide your E-mail.',
      Markup.keyboard([Markup.button.text(isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel')]).resize()
    )
  } else {
    return ctx.wizard.next()
  }
})

const subscriptionTitles = (isRu: boolean) => ({
  game_leela: isRu ? 'üìö –ò–≥—Ä–∞ –õ–∏–ª–∞' : 'üìö Game Leela',
  game_in_group: isRu ? 'üß† –ò–≥—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ' : 'üß† Game in group',
  mentor_game: isRu ? 'ü§ñ –ú–µ–Ω—Ç–æ—Ä' : 'ü§ñ Mentor',
})

rubGetWizard.hears(/@/, async ctx => {
  const isRu = isRussian(ctx)
  const email = ctx.message.text

  try {
    if (!ctx.from) {
      throw new Error('User not found')
    }
    ctx.session.email = email
    await saveUserEmail(ctx.from.id.toString(), email)
    await ctx.reply(
      isRu
        ? '–í–∞—à e-mail —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
        : 'Your e-mail has been successfully saved',
      Markup.removeKeyboard()
    )

    const buttons = paymentOptions.map(option => [
      isRu
        ? `–ö—É–ø–∏—Ç—å ${subscriptionTitles(isRu)[option.subscription]}‚≠êÔ∏è –∑–∞ ${
            option.amount
          } —Ä`
        : `Buy ${subscriptionTitles(isRu)[option.subscription]}‚≠êÔ∏è for ${
            option.amount
          } RUB`,
    ])

    const keyboard = Markup.keyboard(buttons).resize()

    await ctx.reply(
      isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:' : 'Choose the amount for payment:',
      {
        reply_markup: keyboard.reply_markup,
      }
    )
  } catch (error) {
    await ctx.reply(
      isRu
        ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ e-mail. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : 'Error saving e-mail. Please try again.'
    )
  }
})

rubGetWizard.on('text', async ctx => {
  const isRu = isRussian(ctx)
  const msg = ctx.message

  if (msg && 'text' in msg) {
    const selectedOption = msg.text
    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }
    const selectedPayment = paymentOptions.find(option =>
      selectedOption.includes(option.amount.toString())
    )

    if (selectedPayment) {
      const email = ctx.session.email
      const stars = selectedPayment.amount

      const subscription = selectedPayment.subscription

      try {
        const userId = ctx.from?.id
        const invId = Math.floor(Math.random() * 1000000)

        // –ü–æ–ª—É—á–µ–Ω–∏–µ invoiceID
        const invoiceURL = await getInvoiceId(
          merchantLogin,
          stars,
          invId,
          description,
          password1
        )

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
        await setPayments({
          user_id: userId.toString(),
          OutSum: stars.toString(),
          InvId: invId.toString(),
          currency: 'STARS',
          stars,
          status: 'PENDING',
          email: email,
          payment_method: 'Telegram',
          subscription: subscription,
        })

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await updateUserSubscription(userId.toString(), subscription)

        console.log('invoiceURL', invoiceURL)

        const inlineKeyboard = [
          [
            {
              text: isRu
                ? `–ö—É–ø–∏—Ç—å ${
                    subscriptionTitles(isRu)[subscription]
                  } –∑–∞ ${stars} —Ä.`
                : `Buy ${
                    subscriptionTitles(isRu)[subscription]
                  } for ${stars} RUB.`,
              web_app: {
                url: invoiceURL,
              },
            },
          ],
          [
            {
              text: isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel',
              callback_data: 'cancel',
            },
          ],
        ]
        const isCancel = await handleHelpCancel(ctx)
        if (isCancel) {
          return ctx.scene.leave()
        }

        await ctx.reply(
          isRu
            ? `<b>ü§ë –ü–æ–¥–ø–∏—Å–∫–∞ ${subscriptionTitles(isRu)[subscription]}</b>
            \n–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ @neuro_sage`
            : `<b>ü§ë Subscription ${subscriptionTitles(isRu)[subscription]}</b>
            \nIn case of payment issues, please contact us @neuro_sage`,
          {
            reply_markup: {
              inline_keyboard: inlineKeyboard,
            },
            parse_mode: 'HTML',
          }
        )
      } catch (error) {
        console.error('Error in creating payment:', error)
        await ctx.reply(
          isRu
            ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            : 'Error creating invoice. Please try again.'
        )
      }
      return ctx.scene.leave()
    } else {
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.'
          : 'Please select a valid amount.'
      )
    }
  }
})

export default rubGetWizard
