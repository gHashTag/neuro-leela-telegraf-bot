import { Scenes } from 'telegraf'
import { MyContext, MyTextMessageContext } from '../../interfaces'
import { isRussian } from '@/helpers'
import { sendGameStep } from '@/services/sendGameStep'

export const makeNextMoveWizard = new Scenes.WizardScene<MyContext>(
  'makeNextMoveWizard',
  async ctx => {
    console.log('CASE 1: makeNextMoveWizard.next')
    const isRu = isRussian(ctx)
    const { gameStep, plan, direction } = await sendGameStep(
      ctx.session.roll,
      ctx.from.id.toString(),
      ctx,
      isRu
    )

    if (!gameStep.loka) {
      throw new Error('No loka found')
    }

    const text =
      gameStep.loka === 68
        ? isRu
          ? `<b>üîÆ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º –ø–ª–∞–Ω–µ —Å–æ–∑–Ω–∞–Ω–∏—è.</b>

        <i>üé≤ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–µ–µ, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –∫–æ—Å—Ç—è—Ö —Ü–∏—Ñ—Ä—É 6.</i>

        ${plan.short_desc}`
          : `<b>üîÆ The game starts and ends on this plane of consciousness.</b>
        <i>üé≤ To start the game or return to it, you need to roll a 6 on the dice üé≤.</i>

        ${plan.short_desc}`
        : isRu
        ? `<b>üîÆ –í—ã —Å—Ç–æ–∏—Ç–µ –Ω–∞ –ø–ª–∞–Ω–µ ${gameStep.loka} - ${plan.name} - ${direction}</b>

        <i>üìú –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø–ª–∞–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç—á–µ—Ç, –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥—É—Ö–æ–≤–Ω—É—é –º—É–¥—Ä–æ—Å—Ç—å –æ—Ç –≥—É—Ä—É –ò–òü§ñ</i>

        ${plan.short_desc}

        <b>‚ÄºÔ∏è –î–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –∏–≥—Ä–∞ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è.</b>`
        : `<b>üîÆ You are standing on plan ${gameStep.loka} - ${plan.name} - ${direction}</b>

        <i>üìú Read the plan, write a report, and receive spiritual wisdom from the AI guru ü§ñ</i>

        ${plan.short_desc}

        <b>‚ÄºÔ∏è To write the report, you must reply to this message, otherwise the game will not continue.</b>`

    if (gameStep.loka) {
      await ctx.replyWithPhoto(
        `https://yuukfqcsdhkyxegfwlcb.supabase.co/storage/v1/object/public/leelachakra/plans/${gameStep.loka}.jpg`
      )
      await ctx.reply(text, {
        parse_mode: 'HTML',
        reply_markup: { force_reply: true },
      })
    } else {
      await ctx.reply(text, { parse_mode: 'HTML' })
    }

    return ctx.wizard.next()
  },
  async (ctx: MyTextMessageContext) => {
    console.log('CASE 2: makeNextMoveWizard.next')
    const isRu = isRussian(ctx)

    const report = ctx.message?.text

    if (!report || report.length < 50) {
      await ctx.reply(
        isRu
          ? 'üîí –û—Ç—á—ë—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <b>–¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤</b>.'
          : 'üîí Report must be <b>longer than 50 characters</b>.',
        { parse_mode: 'HTML' }
      )
      return
    } else {
      console.log('ELSE report', report)
      ctx.session.report = report
      return ctx.scene.enter('reportWizard')
    }
  }
)

makeNextMoveWizard.leave(ctx => {
  console.log('CASE: makeNextMoveWizard.leave')
})
