import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'

import { handleSelectStars } from '@/handlers/handleSelectStars'

import { starAmounts } from '@/price/helpers/starAmounts'

import { handleBuySubscription } from '@/handlers/handleBuySubscription'

export const paymentScene = new Scenes.BaseScene<MyContext>('paymentScene')

paymentScene.enter(async ctx => {
  const isRu = isRussian(ctx)
  try {
    const message = isRu ? '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?' : 'How do you want to pay?'

    const keyboard = Markup.keyboard([
      [
        Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars'),
        {
          text: isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
          web_app: {
            url: `https://telegram.org/blog/telegram-stars/${
              isRu ? 'ru' : 'en'
            }?ln=a`,
          },
        },
      ],
      [
        Markup.button.text(isRu ? 'üí≥ –†—É–±–ª—è–º–∏' : 'üí≥ In rubles'),
        Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu'),
      ],
    ]).resize()

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(message, {
      reply_markup: keyboard.reply_markup,
    })
  } catch (error) {
    console.error('Error in paymentScene.enter:', error)
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : 'An error occurred. Please try again.'
    )
  }
})

paymentScene.hears(['‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', '‚≠êÔ∏è Stars'], async ctx => {
  console.log('CASE: ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', ctx.match)
  const isRu = isRussian(ctx)
  const subscription = ctx.session.subscription
  console.log('CASE: subscription', subscription)
  if (subscription) {
    if (subscription === 'game_leela') {
      await handleBuySubscription({ ctx, isRu })
      await ctx.scene.leave()
    } else if (subscription === 'game_in_group') {
      await handleBuySubscription({ ctx, isRu })
      await ctx.scene.leave()
    } else if (subscription === 'mentor_game') {
      await handleBuySubscription({ ctx, isRu })
      await ctx.scene.leave()
    }
  } else {
    await handleSelectStars({ ctx, isRu, starAmounts })
    await ctx.scene.leave()
  }
})

paymentScene.hears(['üí≥ –†—É–±–ª—è–º–∏', 'üí≥ In rubles'], async ctx => {
  console.log('CASE: üí≥ –†—É–±–ª—è–º–∏', ctx.match)

  const subscription = ctx.session.subscription
  console.log('CASE: subscription', subscription)

  if (subscription === 'game_leela') {
    console.log('CASE: üìö –ò–≥—Ä–∞ –õ–∏–ª–∞ - rubGetWizard')
    return ctx.scene.enter('rubGetWizard')
  } else if (subscription === 'game_in_group') {
    console.log('CASE: üß† –ò–≥—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ - rubGetWizard')
    return ctx.scene.enter('rubGetWizard')
  } else if (subscription === 'mentor_game') {
    console.log('CASE: ü§ñ –ú–µ–Ω—Ç–æ—Ä - rubGetWizard')
    return ctx.scene.enter('rubGetWizard')
  } else if (subscription === 'stars') {
    console.log('CASE: üí≥ –†—É–±–ª—è–º–∏ - emailWizard')
    await ctx.scene.enter('emailWizard')
  }
})
