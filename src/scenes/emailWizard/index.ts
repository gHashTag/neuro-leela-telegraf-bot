import { Markup, Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'
import { saveUserEmail, setPayments } from '../../core/supabase'
import { isRussian } from '@/helpers'
import { calculateStars } from '@/price/helpers'
import md5 from 'md5'
import { MERCHANT_LOGIN, PASSWORD1, RESULT_URL2 } from '@/config'
import { handleHelpCancel } from '@/handlers'

const merchantLogin = MERCHANT_LOGIN
const password1 = PASSWORD1

const description = '–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥'

const paymentOptions = [
  { amount: 1999, stars: '1999' },
  { amount: 5000, stars: '5000' },
  { amount: 10000, stars: '10000' },
  { amount: 10, stars: '6' },
]

const resultUrl2 = RESULT_URL2

function generateRobokassaUrl(
  merchantLogin: string,
  outSum: number,
  invId: number,
  description: string,
  password1: string
): string {
  const signatureValue = md5(
    `${merchantLogin}:${outSum}:${invId}:${encodeURIComponent(
      resultUrl2
    )}:${password1}`
  ).toUpperCase()
  const url = `https://auth.robokassa.ru/Merchant/Index.aspx?MerchantLogin=${merchantLogin}&OutSum=${outSum}&InvId=${invId}&Description=${encodeURIComponent(
    description
  )}&SignatureValue=${signatureValue}&ResultUrl2=${encodeURIComponent(
    resultUrl2
  )}`

  return url
}

async function getInvoiceId(
  merchantLogin: string,
  outSum: number,
  invId: number,
  description: string,
  password1: string
): Promise<string> {
  console.log('Start getInvoiceId', {
    merchantLogin,
    outSum,
    invId,
    description,
    password1,
  })
  try {
    const signatureValue = md5(
      `${merchantLogin}:${outSum}:${invId}:${password1}`
    )
    console.log('signatureValue', signatureValue)

    const response = generateRobokassaUrl(
      merchantLogin,
      outSum,
      invId,
      description,
      password1
    )
    console.log('response', response)

    return response
  } catch (error) {
    console.error('Error in getInvoiceId:', error)
    throw error
  }
}

export const emailWizard = new Scenes.BaseScene<MyContext>('emailWizard')

emailWizard.enter(async ctx => {
  const isRu = isRussian(ctx)
  await ctx.reply(
    isRu
      ? 'üëâ –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à E-mail.'
      : 'üëâ To generate an invoice, please provide your E-mail.',
    Markup.keyboard([Markup.button.text(isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel')]).resize()
  )
})

emailWizard.hears(/@/, async ctx => {
  const isRu = isRussian(ctx)
  const email = ctx.message.text

  try {
    if (!ctx.from) {
      throw new Error('User not found')
    }
    ctx.session.email = email
    await saveUserEmail(ctx.from.id.toString(), email)
    await ctx.reply(
      isRu
        ? '–í–∞—à e-mail —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
        : 'Your e-mail has been successfully saved',
      Markup.removeKeyboard()
    )

    const buttons = paymentOptions.map(option => [
      isRu
        ? `–ö—É–ø–∏—Ç—å ${option.stars}‚≠êÔ∏è –∑–∞ ${option.amount} —Ä`
        : `Buy ${option.stars}‚≠êÔ∏è for ${option.amount} RUB`,
    ])

    const keyboard = Markup.keyboard(buttons).resize()

    await ctx.reply(
      isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:' : 'Choose the amount for payment:',
      {
        reply_markup: keyboard.reply_markup,
      }
    )
  } catch (error) {
    await ctx.reply(
      isRu
        ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ e-mail. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : 'Error saving e-mail. Please try again.'
    )
  }
})

emailWizard.on('text', async ctx => {
  const isRu = isRussian(ctx)
  const msg = ctx.message

  if (msg && 'text' in msg) {
    const selectedOption = msg.text
    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }
    const selectedPayment = paymentOptions.find(option =>
      selectedOption.includes(option.amount.toString())
    )

    if (selectedPayment) {
      const email = ctx.session.email
      const amount = selectedPayment.amount
      const stars = calculateStars(amount, 10)

      try {
        const userId = ctx.from?.id
        const invId = Math.floor(Math.random() * 1000000)

        // –ü–æ–ª—É—á–µ–Ω–∏–µ invoiceID
        const invoiceURL = await getInvoiceId(
          merchantLogin,
          amount,
          invId,
          description,
          password1
        )

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
        await setPayments({
          user_id: userId.toString(),
          OutSum: amount.toString(),
          InvId: invId.toString(),
          currency: 'STARS',
          stars,
          status: 'PENDING',
          email: email,
          payment_method: 'Telegram',
          subscription: 'stars',
        })
        //

        console.log('invoiceURL', invoiceURL)

        const inlineKeyboard = [
          [
            {
              text: isRu
                ? `–ö—É–ø–∏—Ç—å ${stars}‚≠êÔ∏è –∑–∞ ${amount} —Ä`
                : `Buy ${stars}‚≠êÔ∏è for ${amount} RUB`,
              web_app: {
                url: invoiceURL,
              },
            },
          ],
          [
            {
              text: isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
              web_app: {
                url: `https://telegram.org/blog/telegram-stars/${
                  isRu ? 'ru' : 'en'
                }?ln=a`,
              },
            },
          ],
        ]

        await ctx.reply(
          isRu
            ? `<b>ü§ë –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.\n–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ @neuro_sage`
            : `<b>ü§ë Balance Top-Up</b>
You can now top up your balance with any number of stars and use them for various bot features. Simply choose the number of stars you want to add to your balance.\nIn case of payment issues, please contact us @neuro_sage`,
          {
            reply_markup: {
              inline_keyboard: inlineKeyboard,
            },
            parse_mode: 'HTML',
          }
        )
      } catch (error) {
        console.error('Error in creating payment:', error)
        await ctx.reply(
          isRu
            ? '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            : 'Error creating invoice. Please try again.'
        )
      }
      return ctx.scene.leave()
    } else {
      await ctx.reply(
        isRu
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.'
          : 'Please select a valid amount.'
      )
    }
  }
})

export default emailWizard
