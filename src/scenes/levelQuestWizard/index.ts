import { Scenes, Markup } from 'telegraf'
import {
  handleLevel0,
  handleLevel1,
  handleLevel10,
  handleLevel11,
  handleLevel2,
  handleLevel3,
  handleLevel4,
  handleLevel5,
  handleLevel6,
  handleLevel7,
  handleLevel8,
  handleLevel9,
  handleQuestComplete,
  handleQuestRules,
} from './handlers'
import { MyContext } from '../../interfaces'
import { isRussian } from '@/helpers'
import { mainMenu } from '@/menu'
import { getReferalsCountAndUserData } from '@/core/supabase'

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
const createStepScene = (
  stepNumber: number,
  handler: (ctx: MyContext) => Promise<void>,
  nextStepText: string
) => {
  const scene = new Scenes.BaseScene<MyContext>(`step${stepNumber}`)
  scene.enter(async ctx => {
    const telegram_id = ctx.from?.id?.toString() || ''
    const { count, subscription, isExist } = await getReferalsCountAndUserData(
      telegram_id
    )
    const isRu = isRussian(ctx)
    if (!isExist) {
      await mainMenu(isRu, count, subscription)
    }
    await handler(ctx)

    await ctx.reply(
      stepNumber < 12
        ? isRu
          ? `–ù–∞–∂–º–∏—Ç–µ "${nextStepText}", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`
          : `Click "${nextStepText}", to continue.`
        : isRu
        ? `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! üåü‚ú®`
        : `You have successfully completed all training and reached the maximum level! üåü‚ú®`,
      stepNumber < 12
        ? Markup.keyboard([[nextStepText], ['‚û°Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å']]).resize()
        : await mainMenu(isRu, count, subscription)
    )
  })

  scene.hears(nextStepText, async ctx => {
    if (stepNumber < 12) {
      await ctx.scene.enter(`step${stepNumber + 1}`)
    } else {
      await ctx.scene.enter('complete')
    }
  })

  scene.hears('‚û°Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å', async ctx => {
    await ctx.scene.enter('complete')
  })

  return scene
}

// –°–æ–∑–¥–∞–µ–º –≤—Å–µ —à–∞–≥–∏
export const step0Scene = createStepScene(0, handleQuestRules, '‚û°Ô∏è –î–∞–ª–µ–µ —à–∞–≥ 1')
export const step1Scene = createStepScene(1, handleLevel0, '‚û°Ô∏è –î–∞–ª–µ–µ —à–∞–≥ 2')
export const step2Scene = createStepScene(2, handleLevel1, '‚û°Ô∏è –î–∞–ª–µ–µ —à–∞–≥ 3')
export const step3Scene = createStepScene(3, handleLevel2, '‚û°Ô∏è –î–∞–ª–µ–µ —à–∞–≥ 4')
export const step4Scene = createStepScene(4, handleLevel3, '‚û°Ô∏è –î–∞–ª–µ–µ —à–∞–≥ 5')
export const step5Scene = createStepScene(5, handleLevel4, '‚û°Ô∏è –î–∞–ª–µ–µ —à–∞–≥ 6')
export const step6Scene = createStepScene(6, handleLevel5, '‚û°Ô∏è –î–∞–ª–µ–µ —à–∞–≥ 7')
export const step7Scene = createStepScene(7, handleLevel6, '‚û°Ô∏è –î–∞–ª–µ–µ —à–∞–≥ 8')
export const step8Scene = createStepScene(8, handleLevel7, '‚û°Ô∏è –î–∞–ª–µ–µ —à–∞–≥ 9')
export const step9Scene = createStepScene(9, handleLevel8, '‚û°Ô∏è –î–∞–ª–µ–µ —à–∞–≥ 10')
export const step10Scene = createStepScene(10, handleLevel9, '‚û°Ô∏è –î–∞–ª–µ–µ —à–∞–≥ 11')
export const step11Scene = createStepScene(11, handleLevel10, '‚û°Ô∏è –î–∞–ª–µ–µ —à–∞–≥ 12')
export const step12Scene = createStepScene(12, handleLevel11, '‚û°Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å')

// –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞
export const completeScene = new Scenes.BaseScene<MyContext>('complete')

completeScene.enter(async ctx => {
  await handleQuestComplete(ctx)
  await ctx.scene.leave()
})

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ü–µ–Ω—ã
export const levelQuestWizard = [
  step0Scene,
  step1Scene,
  step2Scene,
  step3Scene,
  step4Scene,
  step5Scene,
  step6Scene,
  step7Scene,
  step8Scene,
  step9Scene,
  step10Scene,
  step11Scene,
  step12Scene,
  completeScene,
]

export default levelQuestWizard
