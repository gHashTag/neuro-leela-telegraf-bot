import { Markup } from 'telegraf'
import {
  createUser,
  getUserByTelegramId,
  incrementBalance,
  getUidInviter,
} from '@/core/supabase'
import { CreateUserData, MyContext } from '@/interfaces'
import bot from '@/core/bot'

import { isRussian } from '@/helpers/language'

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º chat-members
async function checkSubscription(ctx: MyContext): Promise<boolean> {
  try {
    if (!ctx.from?.id) {
      console.error('User ID is undefined')
      throw new Error('User ID is undefined')
    }
    const isRu = isRussian(ctx)
    const chatMember = await bot.telegram.getChatMember(
      isRu ? '@leela_chakra_ai' : '@leela_chakra_ai',
      ctx.from?.id
    )
    console.log('chatMember', chatMember)
    return ['member', 'administrator', 'creator'].includes(chatMember.status)
  } catch (error) {
    console.error('Error checking subscription:', error)
    throw error
  }
}

async function handleSubscriptionMessage(
  ctx: MyContext,
  language_code: string
): Promise<void> {
  const message =
    language_code === 'ru'
      ? '‚ùóÔ∏è–í–ù–ò–ú–ê–ù–ò–ï\n–í—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @neuro_blogger_group\n –ì—Ä—É–ø–ø–∞ –Ω—É–∂–Ω–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.'
      : '‚ùóÔ∏èATTENTION\nYou see this message because you are not subscribed to the channel @neuro_blogger_group\nThe group is needed so that you can ask questions and get help. Please subscribe to our channel to continue using the bot and after clicking the "Subscribe" button, return to the bot and click the /start command.'

  await ctx.reply(message, {
    reply_markup: Markup.inlineKeyboard([
      Markup.button.url(
        language_code === 'ru' ? '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' : 'Subscribe',
        'https://t.me/leela_chakra_ai'
      ),
    ]).reply_markup,
  })
}

// –û—Å–Ω–æ–≤–Ω–æ–π middleware
export const subscriptionMiddleware = async (
  ctx: MyContext,
  next: () => Promise<void>
): Promise<void> => {
  const isRu = isRussian(ctx)
  console.log('ctx', ctx)
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start
    if (
      !ctx.message ||
      !('text' in ctx.message) ||
      !ctx.message.text.startsWith('/start')
    ) {
      return await next()
    }

    if (!ctx.from) {
      console.error('No user data found in context')
      await ctx.reply('Error: No user data found')
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º inviter_id –∏–∑ start –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const inviteCode = ctx.message.text.split(' ')[1]

    console.log('inviteCode', inviteCode)
    ctx.session.inviteCode = inviteCode
    const {
      username,
      id: telegram_id,
      first_name,
      last_name,
      is_bot,
      language_code,
    } = ctx.from

    const finalUsername = username || first_name || telegram_id.toString()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await getUserByTelegramId(telegram_id.toString())

    if (existingUser) {
      console.log('User already registered:', telegram_id)
      const isSubscribed = await checkSubscription(ctx)
      if (!isSubscribed) {
        await handleSubscriptionMessage(ctx, language_code)
        return
      }
      return await next()
    }
    const photo_url = await getUserPhotoUrl(ctx, telegram_id)
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å inviter –∏–∑ start –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

    if (ctx.session.inviteCode) {
      const { inviter_id, inviter_username, inviter_telegram_id } =
        await getUidInviter(inviteCode)

      ctx.session.inviter = inviter_id

      const isSubscribed = await checkSubscription(ctx)
      if (!isSubscribed) {
        await handleSubscriptionMessage(ctx, language_code)
        return
      }

      if (inviter_telegram_id) {
        await bot.telegram.sendMessage(
          inviter_telegram_id,
          isRu
            ? `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ: @${finalUsername}.`
            : `üîó New user registered through your link: @${finalUsername}.`
        )
        await incrementBalance({
          telegram_id: inviter_telegram_id.toString(),
          amount: 100,
        })
        await bot.telegram.sendMessage(
          '@neuro_blogger_group',
          `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ: @${finalUsername}. –ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç: @${inviter_username}.`
        )
      }
    } else {
      const isSubscribed = await checkSubscription(ctx)
      if (!isSubscribed) {
        await handleSubscriptionMessage(ctx, language_code)
        return
      }

      await bot.telegram.sendMessage(
        '@neuro_blogger_group',
        `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ: @${finalUsername}.`
      )
    }

    const userData = {
      username: finalUsername,
      telegram_id: telegram_id.toString(),
      first_name: first_name || null,
      last_name: last_name || null,
      is_bot: is_bot || false,
      language_code: language_code || 'en',
      photo_url,
      chat_id: ctx.chat?.id || null,
      mode: 'clean',
      model: 'gpt-4-turbo',
      count: 0,
      aspect_ratio: '9:16',
      balance: 100,
      inviter: ctx.session.inviter || null,
      token: ctx.telegram.token || null,
    }

    await createUser(userData as CreateUserData)

    await next()
  } catch (error) {
    console.error('Critical error in subscriptionMiddleware:', error)
    throw error
  }
}

async function getUserPhotoUrl(
  ctx: MyContext,
  userId: number
): Promise<string | null> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è
    const userPhotos = await ctx.telegram.getUserProfilePhotos(userId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    if (userPhotos.total_count === 0) {
      console.log('No photos found')
      return null
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
    const photoSizes = userPhotos.photos[0]
    const largestPhoto = photoSizes[photoSizes.length - 1]

    const file = await ctx.telegram.getFile(largestPhoto.file_id)

    if (!file.file_path) {
      console.log('No file_path in response')
      return null
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    const photoUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${file.file_path}`
    console.log('Generated photo URL:', photoUrl)

    return photoUrl
  } catch (error) {
    console.error('Error getting user profile photo:', error)
    throw error
  }
}
